{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncoakley/Documents/GitHub/mp/src/components/sections/homeSection/ui/TreeCategories.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Menu, Checkbox, Collapse } from 'antd';\nimport { useMediaQuery } from \"react-responsive\";\nimport { fetchDataFromSalesForce } from \"../../../../salesforceAuth\";\nimport { usePartnerContext } from \"../contexts/IncentivesContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Panel\n} = Collapse;\nfunction getItem(label, key, text, children, type, checked) {\n  return {\n    key,\n    children,\n    label,\n    type,\n    checked,\n    text\n  };\n}\nexport const items = [getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"Account Based Marketing\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 44,\n  columnNumber: 13\n}, this), 'sub1', '', [getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"Select All\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 17\n}, this), '1', 'Select All', [], 'group', false), getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"Account Based Marketing Software\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 46,\n  columnNumber: 17\n}, this), '2', 'Account Based Marketing Software', [], 'group', false), getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"Account Based Analytics Software\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 47,\n  columnNumber: 17\n}, this), '3', 'Account Based Analytics Software', [], 'group', false), getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"Account Based Data Software\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 17\n}, this), '4', 'Account Based Data Software', [], 'group', false), getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"Buyer Intent Data Providers\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 49,\n  columnNumber: 17\n}, this), '5', 'Buyer Intent Data Providers', [], 'group', false)]), getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"IT Security\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 51,\n  columnNumber: 13\n}, this), 'sub2', 'IT Security'), getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"IT Management\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 13\n}, this), 'sub3', 'IT Management'), getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n  children: \"Analytics Tools & Software\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 53,\n  columnNumber: 13\n}, this), 'sub4', 'Analytics Tools & Software')];\nconst TreeCategories = ({\n  onSelectText,\n  resetCheckboxes,\n  setResetCheckboxes\n}) => {\n  _s();\n  const [openKeys, setOpenKeys] = useState(['sub1', 'sub2', 'sub3', 'sub4']);\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState({\n    'Select All': false\n  });\n  const [selectAllChecked, setSelectAllChecked] = useState(false);\n  const [data, setData] = useState([]);\n  const [magicQuadrantData, setMagicQuadrantData] = useState([]);\n  const {\n    savedAcceptedList\n  } = usePartnerContext();\n  const rootSubmenuKeys = ['sub1'];\n  const isMobile = useMediaQuery({\n    maxWidth: 610\n  });\n  const transformData = records => {\n    const categoryMap = new Map();\n    const magicQuadrantItems = [];\n    const allPartnerCategories = Array.from(new Set(savedAcceptedList.flatMap(partner => Array.isArray(partner.Survey_Option_Name__c) ? partner.Survey_Option_Name__c : [])));\n    records.forEach(record => {\n      const categoryName = record.Main_Category__c;\n      const subCategoryName = record.Survey_Option_Copy__c;\n      const subCategoryKey = record.Id;\n      if (!allPartnerCategories.includes(subCategoryName)) {\n        return;\n      }\n      const item = getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: subCategoryName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), subCategoryKey, subCategoryName, [], \"group\", false);\n      if (categoryName === \"Gartner Magic Quadrant\") {\n        magicQuadrantItems.push(item);\n        return; // Пропустим оставшуюся часть цикла для этого элемента\n      }\n\n      if (!categoryMap.has(categoryName)) {\n        categoryMap.set(categoryName, getItem( /*#__PURE__*/_jsxDEV(\"span\", {\n          children: categoryName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), categoryName.replace(/\\s/g, \"_\"), categoryName, []));\n      }\n      const categoryItem = categoryMap.get(categoryName);\n      if (categoryItem.children) {\n        categoryItem.children.push(item);\n      }\n    });\n    return {\n      mainItems: Array.from(categoryMap.values()),\n      magicQuadrantItems\n    };\n  };\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const salesForceData = await fetchDataFromSalesForce(`query/?q=SELECT+Id,Survey_Option_Copy__c,Main_Category__c+FROM+Survey_Option__c+WHERE+Active_Count__c>0`);\n        const transformedData = transformData(salesForceData.records);\n        setData(transformedData.mainItems);\n        setMagicQuadrantData(transformedData.magicQuadrantItems); // Предполагая, что у вас есть соответствующий useState для этого\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      }\n    }\n    void fetchData();\n  }, []);\n  const onOpenChange = keys => {\n    const latestOpenKey = keys.find(key => openKeys.indexOf(key) === -1);\n    if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n      setOpenKeys(keys);\n    } else {\n      setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\n    }\n  };\n  const handleCheckboxChange = (text, checked) => {\n    if (text === 'Select All') {\n      const updatedCheckboxes = {};\n      items.forEach(item => {\n        if (item.children) {\n          item.children.forEach(child => {\n            updatedCheckboxes[child.text] = checked;\n          });\n        }\n      });\n      setSelectedCheckboxes(updatedCheckboxes);\n      setSelectAllChecked(checked);\n      onSelectText(text, checked);\n    } else {\n      setSelectedCheckboxes(prevState => ({\n        ...prevState,\n        [text]: checked\n      }));\n      setSelectAllChecked(Object.values(selectedCheckboxes).every(checked => checked));\n      onSelectText(text, checked);\n    }\n  };\n  useEffect(() => {\n    // Обработка сброса состояния чекбоксов при изменении resetCheckboxes\n    if (resetCheckboxes) {\n      setSelectedCheckboxes({\n        'Select All': false\n      });\n      setSelectAllChecked(false);\n      onSelectText('Select All', false);\n      setResetCheckboxes(false); // Сбрасываем флаг сразу после сброса\n    }\n  }, [resetCheckboxes, setResetCheckboxes]);\n  return /*#__PURE__*/_jsxDEV(Collapse, {\n    bordered: false,\n    expandIconPosition: 'end',\n    children: [/*#__PURE__*/_jsxDEV(Panel, {\n      header: \"Product / Service Categories\",\n      children: /*#__PURE__*/_jsxDEV(Menu, {\n        mode: isMobile ? 'inline' : 'vertical',\n        openKeys: openKeys,\n        onOpenChange: onOpenChange,\n        style: {\n          width: 300\n        },\n        multiple: true,\n        children: data.map(item => {\n          var _item$children;\n          return /*#__PURE__*/_jsxDEV(Menu.SubMenu, {\n            title: item.label,\n            children: (_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.map(child => /*#__PURE__*/_jsxDEV(Menu.Item, {\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: child.text === 'Select All' ? selectAllChecked : selectedCheckboxes[child.text],\n                onChange: e => handleCheckboxChange(child.text, e.target.checked),\n                children: child.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 37\n              }, this)\n            }, child.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 33\n            }, this))\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)\n    }, \"1\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Panel, {\n      style: {\n        borderBottom: '1px solid lightgrey'\n      },\n      header: \"Gather Magic Quadrant\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        children: magicQuadrantData.map(item => /*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: item.text === 'Select All' ? selectAllChecked : selectedCheckboxes[item.text],\n          onChange: e => handleCheckboxChange(item.text, e.target.checked),\n          children: item.label\n        }, item.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this)\n    }, \"3\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n};\n_s(TreeCategories, \"FIUw8LZcVB+0t8oFu474DdLUIm8=\", false, function () {\n  return [usePartnerContext, useMediaQuery];\n});\n_c = TreeCategories;\nexport default TreeCategories;\nvar _c;\n$RefreshReg$(_c, \"TreeCategories\");","map":{"version":3,"names":["React","useEffect","useState","Menu","Checkbox","Collapse","useMediaQuery","fetchDataFromSalesForce","usePartnerContext","jsxDEV","_jsxDEV","Panel","getItem","label","key","text","children","type","checked","items","fileName","_jsxFileName","lineNumber","columnNumber","TreeCategories","onSelectText","resetCheckboxes","setResetCheckboxes","_s","openKeys","setOpenKeys","selectedCheckboxes","setSelectedCheckboxes","selectAllChecked","setSelectAllChecked","data","setData","magicQuadrantData","setMagicQuadrantData","savedAcceptedList","rootSubmenuKeys","isMobile","maxWidth","transformData","records","categoryMap","Map","magicQuadrantItems","allPartnerCategories","Array","from","Set","flatMap","partner","isArray","Survey_Option_Name__c","forEach","record","categoryName","Main_Category__c","subCategoryName","Survey_Option_Copy__c","subCategoryKey","Id","includes","item","push","has","set","replace","categoryItem","get","mainItems","values","fetchData","salesForceData","transformedData","error","console","onOpenChange","keys","latestOpenKey","find","indexOf","handleCheckboxChange","updatedCheckboxes","child","prevState","Object","every","bordered","expandIconPosition","header","mode","style","width","multiple","map","_item$children","SubMenu","title","Item","onChange","e","target","borderBottom","display","flexDirection","_c","$RefreshReg$"],"sources":["/Users/shannoncoakley/Documents/GitHub/mp/src/components/sections/homeSection/ui/TreeCategories.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport type { MenuProps } from 'antd';\nimport {Menu, Checkbox, Collapse, Tag} from 'antd';\nimport {useMediaQuery} from \"react-responsive\"\nimport {fetchDataFromSalesForce} from \"../../../../salesforceAuth\";\nimport {usePartnerContext} from \"../contexts/IncentivesContext\";\nimport styles from \"../../meetingsSection/styles.module.sass\";\nconst { Panel } = Collapse;\n\ntype MenuItem = {\n    key: string;\n    children?: MenuItem[];\n    label: React.ReactNode;\n    type?: 'group';\n    checked?: boolean;\n    text: string;\n};\n\nfunction getItem(\n    label: React.ReactNode,\n    key: string,\n    text: string,\n    children?: MenuItem[],\n    type?: 'group',\n    checked?: boolean\n): MenuItem {\n    return {\n        key,\n        children,\n        label,\n        type,\n        checked,\n        text\n    } as MenuItem;\n}\n\ninterface TreeCategoriesProps {\n    onSelectText: (text: string, checked: boolean) => void;\n    resetCheckboxes: boolean;\n    setResetCheckboxes: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const items: MenuItem[] = [\n    getItem(<span>Account Based Marketing</span>, 'sub1', '',[\n        getItem(<span>Select All</span>, '1', 'Select All', [], 'group', false),\n        getItem(<span>Account Based Marketing Software</span>, '2', 'Account Based Marketing Software', [], 'group', false ),\n        getItem(<span>Account Based Analytics Software</span>, '3', 'Account Based Analytics Software', [], 'group', false),\n        getItem(<span>Account Based Data Software</span>, '4', 'Account Based Data Software', [], 'group', false),\n        getItem(<span>Buyer Intent Data Providers</span>, '5', 'Buyer Intent Data Providers', [], 'group', false),\n    ]),\n    getItem(<span>IT Security</span>, 'sub2', 'IT Security'),\n    getItem(<span>IT Management</span>, 'sub3', 'IT Management'),\n    getItem(<span>Analytics Tools & Software</span>, 'sub4', 'Analytics Tools & Software')\n];\n\n\nconst TreeCategories: React.FC<TreeCategoriesProps> = ({ onSelectText, resetCheckboxes, setResetCheckboxes }) => {\n    const [openKeys, setOpenKeys] = useState(['sub1', 'sub2', 'sub3', 'sub4']);\n    const [selectedCheckboxes, setSelectedCheckboxes] = useState<Record<string, boolean>>({\n        'Select All': false\n    });\n    const [selectAllChecked, setSelectAllChecked] = useState(false);\n    const [data, setData] = useState<MenuItem[]>([]);\n    const [magicQuadrantData, setMagicQuadrantData] = useState<MenuItem[]>([]);\n    const { savedAcceptedList} = usePartnerContext();\n    const rootSubmenuKeys = ['sub1'];\n    const isMobile = useMediaQuery({ maxWidth: 610 })\n\n    const transformData = (records: any[]): { mainItems: MenuItem[], magicQuadrantItems: MenuItem[] } => {\n        const categoryMap = new Map();\n        const magicQuadrantItems: MenuItem[] = [];\n\n        const allPartnerCategories = Array.from(new Set(savedAcceptedList.flatMap(partner =>\n            Array.isArray(partner.Survey_Option_Name__c) ? partner.Survey_Option_Name__c : []\n        )));\n\n        records.forEach(record => {\n            const categoryName = record.Main_Category__c;\n            const subCategoryName = record.Survey_Option_Copy__c;\n            const subCategoryKey = record.Id;\n\n            if (!allPartnerCategories.includes(subCategoryName)) {\n                return;\n            }\n\n            const item = getItem(\n                <span>{subCategoryName}</span>,\n                subCategoryKey,\n                subCategoryName,\n                [],\n                \"group\",\n                false\n            );\n\n            if (categoryName === \"Gartner Magic Quadrant\") {\n                magicQuadrantItems.push(item);\n                return; // Пропустим оставшуюся часть цикла для этого элемента\n            }\n\n            if (!categoryMap.has(categoryName)) {\n                categoryMap.set(categoryName, getItem(\n                    <span>{categoryName}</span>,\n                    categoryName.replace(/\\s/g, \"_\"),\n                    categoryName,\n                    []\n                ));\n            }\n\n            const categoryItem = categoryMap.get(categoryName);\n            if (categoryItem.children) {\n                categoryItem.children.push(item);\n            }\n        });\n\n        return {\n            mainItems: Array.from(categoryMap.values()),\n            magicQuadrantItems\n\n        };\n    };\n\n\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const salesForceData = await fetchDataFromSalesForce(`query/?q=SELECT+Id,Survey_Option_Copy__c,Main_Category__c+FROM+Survey_Option__c+WHERE+Active_Count__c>0`);\n                const transformedData = transformData(salesForceData.records);\n                setData(transformedData.mainItems);\n                setMagicQuadrantData(transformedData.magicQuadrantItems); // Предполагая, что у вас есть соответствующий useState для этого\n            } catch (error) {\n                console.error('Failed to fetch data:', error);\n            }\n        }\n\n        void fetchData();\n    }, []);\n\n    const onOpenChange: MenuProps['onOpenChange'] = (keys) => {\n        const latestOpenKey = keys.find((key) => openKeys.indexOf(key) === -1);\n        if (rootSubmenuKeys.indexOf(latestOpenKey!) === -1) {\n            setOpenKeys(keys);\n        } else {\n            setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\n        }\n    };\n\n    const handleCheckboxChange = (text: string, checked: boolean) => {\n        if (text === 'Select All') {\n            const updatedCheckboxes: Record<string, boolean> = {};\n\n            items.forEach(item => {\n                if (item.children) {\n                    item.children.forEach(child => {\n                        updatedCheckboxes[child.text] = checked;\n                    });\n                }\n            });\n\n            setSelectedCheckboxes(updatedCheckboxes);\n            setSelectAllChecked(checked);\n            onSelectText(text, checked);\n        } else {\n            setSelectedCheckboxes(prevState => ({\n                ...prevState,\n                [text]: checked\n            }));\n\n            setSelectAllChecked(Object.values(selectedCheckboxes).every(checked => checked));\n            onSelectText(text, checked);\n        }\n\n    };\n\n    useEffect(() => {\n        // Обработка сброса состояния чекбоксов при изменении resetCheckboxes\n        if (resetCheckboxes) {\n            setSelectedCheckboxes({ 'Select All': false });\n            setSelectAllChecked(false);\n            onSelectText('Select All', false);\n            setResetCheckboxes(false); // Сбрасываем флаг сразу после сброса\n        }\n    }, [resetCheckboxes, setResetCheckboxes]);\n\n    return (\n        <Collapse bordered={false} expandIconPosition={'end'}>\n            <Panel header=\"Product / Service Categories\" key=\"1\">\n                <Menu\n                    mode={isMobile ? 'inline' : 'vertical'}\n                    openKeys={openKeys}\n                    onOpenChange={onOpenChange}\n                    style={{ width: 300}}\n                    multiple={true}\n                >\n                    {data.map((item) => (\n                        <Menu.SubMenu key={item.key} title={item.label}>\n                            {item.children?.map((child) => (\n                                <Menu.Item key={child.key}>\n                                    <Checkbox\n                                        checked={child.text === 'Select All' ? selectAllChecked : selectedCheckboxes[child.text]}\n                                        onChange={(e) => handleCheckboxChange(child.text, e.target.checked)}\n                                    >\n                                        {child.label}\n                                    </Checkbox>\n                                </Menu.Item>\n                            ))}\n                        </Menu.SubMenu>\n                    ))}\n                </Menu>\n\n            </Panel>\n            <Panel style={{borderBottom: '1px solid lightgrey'}} header=\"Gather Magic Quadrant\" key=\"3\">\n                <div style={{display: 'flex', flexDirection: 'column'}}>\n                {magicQuadrantData.map((item) => (\n                    <Checkbox\n                        key={item.key}\n                        checked={item.text === 'Select All' ? selectAllChecked : selectedCheckboxes[item.text]}\n                        onChange={(e) => handleCheckboxChange(item.text, e.target.checked)}\n                    >\n                        {item.label}\n                    </Checkbox>\n                ))}\n                </div>\n            </Panel>\n        </Collapse>\n    );\n};\n\nexport default TreeCategories;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}