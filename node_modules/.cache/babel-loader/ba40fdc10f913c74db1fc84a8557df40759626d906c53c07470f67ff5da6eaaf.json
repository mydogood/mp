{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { fetchDataFromSalesForce } from \"./salesforceAuth\";\nexport function useSalesForceData(query, transformer) {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const salesForceData = await fetchDataFromSalesForce(query);\n        const transformedData = salesForceData.records.map(transformer);\n        setData(transformedData);\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    }\n    void fetchData();\n  }, []);\n  return data;\n}\n_s(useSalesForceData, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\nexport function useSalesForceDataWithTwoQueries(firstQuery, secondQueryTemplate, transformer) {\n  _s2();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const firstSalesForceData = await fetchDataFromSalesForce(firstQuery);\n        if (firstSalesForceData && firstSalesForceData.records && firstSalesForceData.records.length > 0) {\n          const promises = firstSalesForceData.records.map(async record => {\n            const clientId = record.Client_Id__c;\n            const secondQuery = secondQueryTemplate.replace(\"record.Client_Id__c\", clientId);\n            const secondSalesForceData = await fetchDataFromSalesForce(secondQuery);\n            return {\n              ...record,\n              ...(secondSalesForceData.records.length > 0 ? secondSalesForceData.records[0] : {})\n            };\n          });\n          const combinedRecords = await Promise.all(promises);\n          const transformedData = combinedRecords.map(transformer);\n          setData(transformedData);\n        } else {\n          console.warn(\"No records found in first request\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    }\n    void fetchData();\n  }, [firstQuery, secondQueryTemplate]);\n  return data;\n}\n_s2(useSalesForceDataWithTwoQueries, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\nexport function useSalesForceDataWithThreeQueries(firstQuery, secondQuery, thirdQueryGenerator, transformer) {\n  _s3();\n  const [data, setData] = useState([]);\n  const fetchData = useCallback(async () => {\n    try {\n      let allRecords = [];\n\n      // Processing the first request\n      const firstSalesForceData = await fetchDataFromSalesForce(firstQuery);\n      if (firstSalesForceData && firstSalesForceData.records) {\n        firstSalesForceData.records.forEach(record => {\n          allRecords.push({\n            primaryData: record\n          });\n        });\n      }\n\n      // Processing the second request\n      const secondSalesForceData = await fetchDataFromSalesForce(secondQuery);\n      if (secondSalesForceData && secondSalesForceData.records) {\n        secondSalesForceData.records.forEach(record => {\n          allRecords.push({\n            primaryData: record\n          });\n        });\n      }\n\n      // Getting the ID for the third request only after the first two requests have completed\n      const recordIds = allRecords.map(record => record.primaryData.Id);\n\n      // Processing the third request\n      const thirdQuery = thirdQueryGenerator(recordIds);\n      const thirdSalesForceData = await fetchDataFromSalesForce(thirdQuery);\n      for (const relatedRecord of thirdSalesForceData.records) {\n        const match = allRecords.find(record => record.primaryData.Id === relatedRecord.Client_Name__c);\n        if (match) {\n          // Changes to Survey_Option_Name__c processing logic\n          if (!match.relatedData) {\n            match.relatedData = {\n              ...relatedRecord,\n              Survey_Option_Name__c: Array.isArray(relatedRecord.Survey_Option_Name__c) ? relatedRecord.Survey_Option_Name__c : [relatedRecord.Survey_Option_Name__c]\n            };\n          } else {\n            match.relatedData.Survey_Option_Name__c = [...(match.relatedData.Survey_Option_Name__c || []), ...(Array.isArray(relatedRecord.Survey_Option_Name__c) ? relatedRecord.Survey_Option_Name__c : [relatedRecord.Survey_Option_Name__c])];\n          }\n        }\n      }\n\n      // Data Conversion\n      const transformedData = allRecords.map(record => transformer(record.primaryData, record.relatedData));\n      setData(transformedData);\n    } catch (error) {\n      console.error(\"Failed to fetch data:\", error);\n    }\n  }, [firstQuery, secondQuery, thirdQueryGenerator, transformer]);\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n  return {\n    data,\n    fetchData\n  };\n}\n_s3(useSalesForceDataWithThreeQueries, \"do/SReziz6EB1SVWX4TH69hdcEc=\");\nexport function usePartnerDetails(partnerKey) {\n  _s4();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    if (!partnerKey) return;\n    async function fetchData() {\n      setLoading(true);\n      try {\n        const response = await fetchDataFromSalesForce(`query/?q=SELECT+Rich_Merge__c+FROM+Client_Pitch__c+WHERE+Active__c=true+AND+Custom_Outreach__c=true+AND+Client_Id__c='${partnerKey}'`);\n        setData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching partner details:\", error);\n        setData(null);\n      } finally {\n        setLoading(false);\n      }\n    }\n    void fetchData();\n  }, [partnerKey]);\n  return {\n    data,\n    loading\n  };\n}\n_s4(usePartnerDetails, \"zRvvAK96aYqko2QYrTyuOCE8lvM=\");\nexport const getMemberInfoFromContact = async criteria => {\n  const endpoint = `query/?q=SELECT+Id,Member__c,Points_Balance__c,Pending_Points__c,Partner_Referral_Link__c,Shortened_PR_Link__c,Email,Member_Survey_Link__c,Non_Profit_Top_Choice__c,Mailing_Address_Verified_Date__c,MailingStreet,MailingCity,MailingState,MailingPostalCode,MailingCountry,Charity_Name__c,AccountId+FROM+Contact+WHERE+RecordTypeId='01236000000yGps'+AND+Id='${criteria}'`;\n  try {\n    const response = await fetchDataFromSalesForce(endpoint);\n    if (response && response.records && response.records.length > 0) {\n      const record = response.records[0];\n      return {\n        Id: record.Id,\n        Member__c: record.Member__c,\n        Pending_Points__c: record.Pending_Points__c,\n        Partner_Referral_Link__c: record.Partner_Referral_Link__c,\n        Points_Balance__c: record.Points_Balance__c,\n        Member_Survey_Link__c: record.Member_Survey_Link__c,\n        Non_Profit_Top_Choice__c: record.Non_Profit_Top_Choice__c,\n        Charity_Name__c: record.Charity_Name__c,\n        MailingStreet: record.MailingStreet,\n        MailingCity: record.MailingCity,\n        MailingState: record.MailingState,\n        MailingPostalCode: record.MailingPostalCode,\n        MailingCountry: record.MailingCountry,\n        Email: record.Email,\n        Mailing_Address_Verified_Date__c: record.Mailing_Address_Verified_Date__c,\n        AccountId: record.AccountId,\n        Shortened_PR_Link__c: record.Shortened_PR_Link__c\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching Member Info:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["useState","useEffect","useCallback","fetchDataFromSalesForce","useSalesForceData","query","transformer","_s","data","setData","fetchData","salesForceData","transformedData","records","map","error","console","useSalesForceDataWithTwoQueries","firstQuery","secondQueryTemplate","_s2","firstSalesForceData","length","promises","record","clientId","Client_Id__c","secondQuery","replace","secondSalesForceData","combinedRecords","Promise","all","warn","useSalesForceDataWithThreeQueries","thirdQueryGenerator","_s3","allRecords","forEach","push","primaryData","recordIds","Id","thirdQuery","thirdSalesForceData","relatedRecord","match","find","Client_Name__c","relatedData","Survey_Option_Name__c","Array","isArray","usePartnerDetails","partnerKey","_s4","loading","setLoading","response","getMemberInfoFromContact","criteria","endpoint","Member__c","Pending_Points__c","Partner_Referral_Link__c","Points_Balance__c","Member_Survey_Link__c","Non_Profit_Top_Choice__c","Charity_Name__c","MailingStreet","MailingCity","MailingState","MailingPostalCode","MailingCountry","Email","Mailing_Address_Verified_Date__c","AccountId","Shortened_PR_Link__c"],"sources":["/Users/shannoncoakley/Documents/GitHub/mp/src/getSalesForceData.ts"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n  fetchDataFromSalesForce,\n  updateDataInSalesForce,\n} from \"./salesforceAuth\";\n\ntype Transformer<T, U> = (record: T) => U;\n\nexport function useSalesForceData<T, U>(\n  query: string,\n  transformer: Transformer<T, U>\n) {\n  const [data, setData] = useState<U[]>([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const salesForceData = await fetchDataFromSalesForce(query);\n        const transformedData = salesForceData.records.map(transformer);\n        setData(transformedData);\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    }\n    void fetchData();\n  }, []);\n\n  return data;\n}\n\ntype RecordType = {\n  Client_Id__c: string;\n};\n\nexport function useSalesForceDataWithTwoQueries<T, U>(\n  firstQuery: string,\n  secondQueryTemplate: string,\n  transformer: Transformer<T, U>\n) {\n  const [data, setData] = useState<U[]>([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const firstSalesForceData = await fetchDataFromSalesForce(firstQuery);\n\n        if (\n          firstSalesForceData &&\n          firstSalesForceData.records &&\n          firstSalesForceData.records.length > 0\n        ) {\n          const promises = firstSalesForceData.records.map(\n            async (record: RecordType) => {\n              const clientId = record.Client_Id__c;\n              const secondQuery = secondQueryTemplate.replace(\n                \"record.Client_Id__c\",\n                clientId\n              );\n\n              const secondSalesForceData = await fetchDataFromSalesForce(\n                secondQuery\n              );\n\n              return {\n                ...record,\n                ...(secondSalesForceData.records.length > 0\n                  ? secondSalesForceData.records[0]\n                  : {}),\n              };\n            }\n          );\n\n          const combinedRecords = await Promise.all(promises);\n\n          const transformedData = combinedRecords.map(transformer);\n          setData(transformedData);\n        } else {\n          console.warn(\"No records found in first request\");\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch data:\", error);\n      }\n    }\n\n    void fetchData();\n  }, [firstQuery, secondQueryTemplate]);\n\n  return data;\n}\n\ntype SalesForcePartner = {\n  Id: string;\n  Client_Id__c?: string;\n  Account_ID__c?: string;\n  Member_Account_ID__c?: string;\n  Client_Name__c: string;\n  Account_Name_Merge_Only__c: string;\n  Quick_Overview__c: string;\n  Client_Website__c?: string;\n  Website?: string;\n  Rich_Merge__c?: string;\n  Stage_M__c?: string;\n  Stage_MP__c?: string;\n  Sweepstakes_Type__c?: string;\n  Client_Campaign_ID__c?: string;\n  Interest_in_Partner__c?: string;\n  RecordTypeId?: string;\n  Client_Campaign__c?: string;\n  Meeting_Source__c?: string;\n  Intro_Type__c?: string;\n  Request_Submitted_Date_M__c?: string;\n  Related_Membership__c: string;\n  Related_Membership_Member__c: string;\n  Survey_Option_Name__c: string[];\n};\n\nexport function useSalesForceDataWithThreeQueries<T, U>(\n  firstQuery: string,\n  secondQuery: string,\n  thirdQueryGenerator: (recordIds: string[]) => string,\n  transformer: (\n    primaryData: SalesForcePartner,\n    relatedData?: SalesForcePartner\n  ) => U\n): {\n  data: U[];\n  fetchData: () => void;\n} {\n  const [data, setData] = useState<U[]>([]);\n\n  const fetchData = useCallback(async () => {\n    try {\n      let allRecords: {\n        primaryData: SalesForcePartner;\n        relatedData?: SalesForcePartner;\n      }[] = [];\n\n      // Processing the first request\n      const firstSalesForceData = await fetchDataFromSalesForce(firstQuery);\n      if (firstSalesForceData && firstSalesForceData.records) {\n        firstSalesForceData.records.forEach((record: any) => {\n          allRecords.push({ primaryData: record });\n        });\n      }\n\n      // Processing the second request\n      const secondSalesForceData = await fetchDataFromSalesForce(secondQuery);\n      if (secondSalesForceData && secondSalesForceData.records) {\n        secondSalesForceData.records.forEach((record: any) => {\n          allRecords.push({ primaryData: record });\n        });\n      }\n\n      // Getting the ID for the third request only after the first two requests have completed\n      const recordIds = allRecords.map((record) => record.primaryData.Id);\n\n      // Processing the third request\n      const thirdQuery = thirdQueryGenerator(recordIds);\n      const thirdSalesForceData = await fetchDataFromSalesForce(thirdQuery);\n\n      for (const relatedRecord of thirdSalesForceData.records) {\n        const match = allRecords.find(\n          (record) => record.primaryData.Id === relatedRecord.Client_Name__c\n        );\n        if (match) {\n          // Changes to Survey_Option_Name__c processing logic\n          if (!match.relatedData) {\n            match.relatedData = {\n              ...relatedRecord,\n              Survey_Option_Name__c: Array.isArray(\n                relatedRecord.Survey_Option_Name__c\n              )\n                ? relatedRecord.Survey_Option_Name__c\n                : [relatedRecord.Survey_Option_Name__c],\n            };\n          } else {\n            match.relatedData.Survey_Option_Name__c = [\n              ...(match.relatedData.Survey_Option_Name__c || []),\n              ...(Array.isArray(relatedRecord.Survey_Option_Name__c)\n                ? relatedRecord.Survey_Option_Name__c\n                : [relatedRecord.Survey_Option_Name__c]),\n            ];\n          }\n        }\n      }\n\n      // Data Conversion\n      const transformedData = allRecords.map((record) =>\n        transformer(record.primaryData, record.relatedData)\n      );\n      setData(transformedData);\n    } catch (error) {\n      console.error(\"Failed to fetch data:\", error);\n    }\n  }, [firstQuery, secondQuery, thirdQueryGenerator, transformer]);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return {\n    data,\n    fetchData,\n  };\n}\n\nexport function usePartnerDetails(partnerKey: string | undefined) {\n  const [data, setData] = useState<null | any>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!partnerKey) return;\n    async function fetchData() {\n      setLoading(true);\n      try {\n        const response = await fetchDataFromSalesForce(\n          `query/?q=SELECT+Rich_Merge__c+FROM+Client_Pitch__c+WHERE+Active__c=true+AND+Custom_Outreach__c=true+AND+Client_Id__c='${partnerKey}'`\n        );\n        setData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching partner details:\", error);\n        setData(null);\n      } finally {\n        setLoading(false);\n      }\n    }\n    void fetchData();\n  }, [partnerKey]);\n  return { data, loading };\n}\n\ninterface ContactInfo {\n  Id: string;\n  Member__c: string;\n  Points_Balance__c: string;\n  Pending_Points__c: string;\n  Member_Survey_Link__c: string;\n  Non_Profit_Top_Choice__c?: string;\n  Charity_Name__c?: string;\n  MailingStreet?: string;\n  MailingCity?: string;\n  MailingState?: string;\n  MailingPostalCode?: string;\n  MailingCountry?: string;\n  Mailing_Address_Verified_Date__c?: string;\n  AccountId: string;\n  Partner_Referral_Link__c: string;\n  Shortened_PR_Link__c: string;\n  Email: string;\n}\n\nexport const getMemberInfoFromContact = async (\n  criteria: string\n): Promise<ContactInfo | null> => {\n  const endpoint = `query/?q=SELECT+Id,Member__c,Points_Balance__c,Pending_Points__c,Partner_Referral_Link__c,Shortened_PR_Link__c,Email,Member_Survey_Link__c,Non_Profit_Top_Choice__c,Mailing_Address_Verified_Date__c,MailingStreet,MailingCity,MailingState,MailingPostalCode,MailingCountry,Charity_Name__c,AccountId+FROM+Contact+WHERE+RecordTypeId='01236000000yGps'+AND+Id='${criteria}'`;\n\n  try {\n    const response = await fetchDataFromSalesForce(endpoint);\n    if (response && response.records && response.records.length > 0) {\n      const record = response.records[0];\n      return {\n        Id: record.Id,\n        Member__c: record.Member__c,\n        Pending_Points__c: record.Pending_Points__c,\n        Partner_Referral_Link__c: record.Partner_Referral_Link__c,\n        Points_Balance__c: record.Points_Balance__c,\n        Member_Survey_Link__c: record.Member_Survey_Link__c,\n        Non_Profit_Top_Choice__c: record.Non_Profit_Top_Choice__c,\n        Charity_Name__c: record.Charity_Name__c,\n        MailingStreet: record.MailingStreet,\n        MailingCity: record.MailingCity,\n        MailingState: record.MailingState,\n        MailingPostalCode: record.MailingPostalCode,\n        MailingCountry: record.MailingCountry,\n        Email: record.Email,\n        Mailing_Address_Verified_Date__c:\n          record.Mailing_Address_Verified_Date__c,\n        AccountId: record.AccountId,\n        Shortened_PR_Link__c: record.Shortened_PR_Link__c,\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching Member Info:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}